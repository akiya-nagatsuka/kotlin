//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable

    fun A() {
        print(3 + 4)
    }

//
// Transformed IR
// ------------------------------------------

fun A() {
  print(LiveLiterals%TestKt.Int%%this%call-plus%arg-0%call-print%fun-A() + LiveLiterals%TestKt.Int%arg-0%call-plus%arg-0%call-print%fun-A())
}
@LiveLiteralFileInfo(file = "/Test.kt")
internal object LiveLiterals%TestKt {
  val Int%%this%call-plus%arg-0%call-print%fun-A: Int = 3
  var State%Int%%this%call-plus%arg-0%call-print%fun-A: State<Int>?
  @LiveLiteralInfo(key = "Int%%this%call-plus%arg-0%call-print%fun-A", offset = 72)
  fun Int%%this%call-plus%arg-0%call-print%fun-A(): Int {
    if (!isLiveLiteralsEnabled) {
      return Int%%this%call-plus%arg-0%call-print%fun-A
    }
    val tmp = State%Int%%this%call-plus%arg-0%call-print%fun-A
    return when {
      tmp == null -> {
        val tmp = liveLiteral("Int%%this%call-plus%arg-0%call-print%fun-A", Int%%this%call-plus%arg-0%call-print%fun-A)
        State%Int%%this%call-plus%arg-0%call-print%fun-A = tmp
        tmp
      }
      else -> {
        tmp
      }
    }
    .value
  }
  val Int%arg-0%call-plus%arg-0%call-print%fun-A: Int = 4
  var State%Int%arg-0%call-plus%arg-0%call-print%fun-A: State<Int>?
  @LiveLiteralInfo(key = "Int%arg-0%call-plus%arg-0%call-print%fun-A", offset = 76)
  fun Int%arg-0%call-plus%arg-0%call-print%fun-A(): Int {
    if (!isLiveLiteralsEnabled) {
      return Int%arg-0%call-plus%arg-0%call-print%fun-A
    }
    val tmp = State%Int%arg-0%call-plus%arg-0%call-print%fun-A
    return when {
      tmp == null -> {
        val tmp = liveLiteral("Int%arg-0%call-plus%arg-0%call-print%fun-A", Int%arg-0%call-plus%arg-0%call-print%fun-A)
        State%Int%arg-0%call-plus%arg-0%call-print%fun-A = tmp
        tmp
      }
      else -> {
        tmp
      }
    }
    .value
  }
}
