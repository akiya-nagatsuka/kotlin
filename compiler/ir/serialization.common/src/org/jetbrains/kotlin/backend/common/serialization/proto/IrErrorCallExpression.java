// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression}
 */
public final class IrErrorCallExpression extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression)
    IrErrorCallExpressionOrBuilder {
  // Use IrErrorCallExpression.newBuilder() to construct.
  private IrErrorCallExpression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrErrorCallExpression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrErrorCallExpression defaultInstance;
  public static IrErrorCallExpression getDefaultInstance() {
    return defaultInstance;
  }

  public IrErrorCallExpression getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrErrorCallExpression(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            description_ = input.readInt32();
            break;
          }
          case 18: {
            IrExpression.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = receiver_.toBuilder();
            }
            receiver_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(receiver_);
              receiver_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              valueArgument_ = new java.util.ArrayList<IrExpression>();
              mutable_bitField0_ |= 0x00000004;
            }
            valueArgument_.add(input.readMessage(IrExpression.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        valueArgument_ = java.util.Collections.unmodifiableList(valueArgument_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrErrorCallExpression_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrErrorCallExpression_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            IrErrorCallExpression.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrErrorCallExpression> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrErrorCallExpression>() {
    public IrErrorCallExpression parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrErrorCallExpression(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<IrErrorCallExpression> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int DESCRIPTION_FIELD_NUMBER = 1;
  private int description_;
  /**
   * <code>required int32 description = 1;</code>
   */
  public boolean hasDescription() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int32 description = 1;</code>
   */
  public int getDescription() {
    return description_;
  }

  public static final int RECEIVER_FIELD_NUMBER = 2;
  private IrExpression receiver_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
   */
  public boolean hasReceiver() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
   */
  public IrExpression getReceiver() {
    return receiver_;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
   */
  public IrExpressionOrBuilder getReceiverOrBuilder() {
    return receiver_;
  }

  public static final int VALUE_ARGUMENT_FIELD_NUMBER = 3;
  private java.util.List<IrExpression> valueArgument_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
   */
  public java.util.List<IrExpression> getValueArgumentList() {
    return valueArgument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
   */
  public java.util.List<? extends IrExpressionOrBuilder>
      getValueArgumentOrBuilderList() {
    return valueArgument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
   */
  public int getValueArgumentCount() {
    return valueArgument_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
   */
  public IrExpression getValueArgument(int index) {
    return valueArgument_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
   */
  public IrExpressionOrBuilder getValueArgumentOrBuilder(
      int index) {
    return valueArgument_.get(index);
  }

  private void initFields() {
    description_ = 0;
    receiver_ = IrExpression.getDefaultInstance();
    valueArgument_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasDescription()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasReceiver()) {
      if (!getReceiver().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    for (int i = 0; i < getValueArgumentCount(); i++) {
      if (!getValueArgument(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, description_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, receiver_);
    }
    for (int i = 0; i < valueArgument_.size(); i++) {
      output.writeMessage(3, valueArgument_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(1, description_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, receiver_);
    }
    for (int i = 0; i < valueArgument_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, valueArgument_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static IrErrorCallExpression parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrErrorCallExpression parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrErrorCallExpression parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrErrorCallExpression parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrErrorCallExpression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrErrorCallExpression parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static IrErrorCallExpression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static IrErrorCallExpression parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static IrErrorCallExpression parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrErrorCallExpression parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(IrErrorCallExpression prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression)
      IrErrorCallExpressionOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrErrorCallExpression_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrErrorCallExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              IrErrorCallExpression.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getReceiverFieldBuilder();
        getValueArgumentFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      description_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (receiverBuilder_ == null) {
        receiver_ = IrExpression.getDefaultInstance();
      } else {
        receiverBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (valueArgumentBuilder_ == null) {
        valueArgument_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        valueArgumentBuilder_.clear();
      }
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrErrorCallExpression_descriptor;
    }

    public IrErrorCallExpression getDefaultInstanceForType() {
      return IrErrorCallExpression.getDefaultInstance();
    }

    public IrErrorCallExpression build() {
      IrErrorCallExpression result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public IrErrorCallExpression buildPartial() {
      IrErrorCallExpression result = new IrErrorCallExpression(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.description_ = description_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      if (receiverBuilder_ == null) {
        result.receiver_ = receiver_;
      } else {
        result.receiver_ = receiverBuilder_.build();
      }
      if (valueArgumentBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          valueArgument_ = java.util.Collections.unmodifiableList(valueArgument_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.valueArgument_ = valueArgument_;
      } else {
        result.valueArgument_ = valueArgumentBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof IrErrorCallExpression) {
        return mergeFrom((IrErrorCallExpression)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(IrErrorCallExpression other) {
      if (other == IrErrorCallExpression.getDefaultInstance()) return this;
      if (other.hasDescription()) {
        setDescription(other.getDescription());
      }
      if (other.hasReceiver()) {
        mergeReceiver(other.getReceiver());
      }
      if (valueArgumentBuilder_ == null) {
        if (!other.valueArgument_.isEmpty()) {
          if (valueArgument_.isEmpty()) {
            valueArgument_ = other.valueArgument_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureValueArgumentIsMutable();
            valueArgument_.addAll(other.valueArgument_);
          }
          onChanged();
        }
      } else {
        if (!other.valueArgument_.isEmpty()) {
          if (valueArgumentBuilder_.isEmpty()) {
            valueArgumentBuilder_.dispose();
            valueArgumentBuilder_ = null;
            valueArgument_ = other.valueArgument_;
            bitField0_ = (bitField0_ & ~0x00000004);
            valueArgumentBuilder_ = 
              org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getValueArgumentFieldBuilder() : null;
          } else {
            valueArgumentBuilder_.addAllMessages(other.valueArgument_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasDescription()) {
        
        return false;
      }
      if (hasReceiver()) {
        if (!getReceiver().isInitialized()) {
          
          return false;
        }
      }
      for (int i = 0; i < getValueArgumentCount(); i++) {
        if (!getValueArgument(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      IrErrorCallExpression parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (IrErrorCallExpression) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int description_ ;
    /**
     * <code>required int32 description = 1;</code>
     */
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 description = 1;</code>
     */
    public int getDescription() {
      return description_;
    }
    /**
     * <code>required int32 description = 1;</code>
     */
    public Builder setDescription(int value) {
      bitField0_ |= 0x00000001;
      description_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 description = 1;</code>
     */
    public Builder clearDescription() {
      bitField0_ = (bitField0_ & ~0x00000001);
      description_ = 0;
      onChanged();
      return this;
    }

    private IrExpression receiver_ = IrExpression.getDefaultInstance();
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder> receiverBuilder_;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public boolean hasReceiver() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public IrExpression getReceiver() {
      if (receiverBuilder_ == null) {
        return receiver_;
      } else {
        return receiverBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public Builder setReceiver(IrExpression value) {
      if (receiverBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        receiver_ = value;
        onChanged();
      } else {
        receiverBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public Builder setReceiver(
        IrExpression.Builder builderForValue) {
      if (receiverBuilder_ == null) {
        receiver_ = builderForValue.build();
        onChanged();
      } else {
        receiverBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public Builder mergeReceiver(IrExpression value) {
      if (receiverBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            receiver_ != IrExpression.getDefaultInstance()) {
          receiver_ =
            IrExpression.newBuilder(receiver_).mergeFrom(value).buildPartial();
        } else {
          receiver_ = value;
        }
        onChanged();
      } else {
        receiverBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public Builder clearReceiver() {
      if (receiverBuilder_ == null) {
        receiver_ = IrExpression.getDefaultInstance();
        onChanged();
      } else {
        receiverBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public IrExpression.Builder getReceiverBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getReceiverFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    public IrExpressionOrBuilder getReceiverOrBuilder() {
      if (receiverBuilder_ != null) {
        return receiverBuilder_.getMessageOrBuilder();
      } else {
        return receiver_;
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression receiver = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder>
        getReceiverFieldBuilder() {
      if (receiverBuilder_ == null) {
        receiverBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            IrExpression, IrExpression.Builder, IrExpressionOrBuilder>(
                getReceiver(),
                getParentForChildren(),
                isClean());
        receiver_ = null;
      }
      return receiverBuilder_;
    }

    private java.util.List<IrExpression> valueArgument_ =
      java.util.Collections.emptyList();
    private void ensureValueArgumentIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        valueArgument_ = new java.util.ArrayList<IrExpression>(valueArgument_);
        bitField0_ |= 0x00000004;
       }
    }

    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder> valueArgumentBuilder_;

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public java.util.List<IrExpression> getValueArgumentList() {
      if (valueArgumentBuilder_ == null) {
        return java.util.Collections.unmodifiableList(valueArgument_);
      } else {
        return valueArgumentBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public int getValueArgumentCount() {
      if (valueArgumentBuilder_ == null) {
        return valueArgument_.size();
      } else {
        return valueArgumentBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public IrExpression getValueArgument(int index) {
      if (valueArgumentBuilder_ == null) {
        return valueArgument_.get(index);
      } else {
        return valueArgumentBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder setValueArgument(
        int index, IrExpression value) {
      if (valueArgumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValueArgumentIsMutable();
        valueArgument_.set(index, value);
        onChanged();
      } else {
        valueArgumentBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder setValueArgument(
        int index, IrExpression.Builder builderForValue) {
      if (valueArgumentBuilder_ == null) {
        ensureValueArgumentIsMutable();
        valueArgument_.set(index, builderForValue.build());
        onChanged();
      } else {
        valueArgumentBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder addValueArgument(IrExpression value) {
      if (valueArgumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValueArgumentIsMutable();
        valueArgument_.add(value);
        onChanged();
      } else {
        valueArgumentBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder addValueArgument(
        int index, IrExpression value) {
      if (valueArgumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValueArgumentIsMutable();
        valueArgument_.add(index, value);
        onChanged();
      } else {
        valueArgumentBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder addValueArgument(
        IrExpression.Builder builderForValue) {
      if (valueArgumentBuilder_ == null) {
        ensureValueArgumentIsMutable();
        valueArgument_.add(builderForValue.build());
        onChanged();
      } else {
        valueArgumentBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder addValueArgument(
        int index, IrExpression.Builder builderForValue) {
      if (valueArgumentBuilder_ == null) {
        ensureValueArgumentIsMutable();
        valueArgument_.add(index, builderForValue.build());
        onChanged();
      } else {
        valueArgumentBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder addAllValueArgument(
        Iterable<? extends IrExpression> values) {
      if (valueArgumentBuilder_ == null) {
        ensureValueArgumentIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, valueArgument_);
        onChanged();
      } else {
        valueArgumentBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder clearValueArgument() {
      if (valueArgumentBuilder_ == null) {
        valueArgument_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        valueArgumentBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public Builder removeValueArgument(int index) {
      if (valueArgumentBuilder_ == null) {
        ensureValueArgumentIsMutable();
        valueArgument_.remove(index);
        onChanged();
      } else {
        valueArgumentBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public IrExpression.Builder getValueArgumentBuilder(
        int index) {
      return getValueArgumentFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public IrExpressionOrBuilder getValueArgumentOrBuilder(
        int index) {
      if (valueArgumentBuilder_ == null) {
        return valueArgument_.get(index);  } else {
        return valueArgumentBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public java.util.List<? extends IrExpressionOrBuilder>
         getValueArgumentOrBuilderList() {
      if (valueArgumentBuilder_ != null) {
        return valueArgumentBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(valueArgument_);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public IrExpression.Builder addValueArgumentBuilder() {
      return getValueArgumentFieldBuilder().addBuilder(
          IrExpression.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public IrExpression.Builder addValueArgumentBuilder(
        int index) {
      return getValueArgumentFieldBuilder().addBuilder(
          index, IrExpression.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value_argument = 3;</code>
     */
    public java.util.List<IrExpression.Builder>
         getValueArgumentBuilderList() {
      return getValueArgumentFieldBuilder().getBuilderList();
    }
    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder>
        getValueArgumentFieldBuilder() {
      if (valueArgumentBuilder_ == null) {
        valueArgumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            IrExpression, IrExpression.Builder, IrExpressionOrBuilder>(
                valueArgument_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        valueArgument_ = null;
      }
      return valueArgumentBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression)
  }

  static {
    defaultInstance = new IrErrorCallExpression(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorCallExpression)
}
