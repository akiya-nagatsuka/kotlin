// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen}
 */
public final class IrWhen extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen)
    IrWhenOrBuilder {
  // Use IrWhen.newBuilder() to construct.
  private IrWhen(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrWhen(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrWhen defaultInstance;
  public static IrWhen getDefaultInstance() {
    return defaultInstance;
  }

  public IrWhen getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrWhen(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              branch_ = new java.util.ArrayList<IrStatement>();
              mutable_bitField0_ |= 0x00000001;
            }
            branch_.add(input.readMessage(IrStatement.PARSER, extensionRegistry));
            break;
          }
          case 16: {
            bitField0_ |= 0x00000001;
            originName_ = input.readInt32();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        branch_ = java.util.Collections.unmodifiableList(branch_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhen_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhen_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            IrWhen.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrWhen> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrWhen>() {
    public IrWhen parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrWhen(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<IrWhen> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int BRANCH_FIELD_NUMBER = 1;
  private java.util.List<IrStatement> branch_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
   */
  public java.util.List<IrStatement> getBranchList() {
    return branch_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
   */
  public java.util.List<? extends IrStatementOrBuilder>
      getBranchOrBuilderList() {
    return branch_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
   */
  public int getBranchCount() {
    return branch_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
   */
  public IrStatement getBranch(int index) {
    return branch_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
   */
  public IrStatementOrBuilder getBranchOrBuilder(
      int index) {
    return branch_.get(index);
  }

  public static final int ORIGIN_NAME_FIELD_NUMBER = 2;
  private int originName_;
  /**
   * <code>optional int32 origin_name = 2;</code>
   */
  public boolean hasOriginName() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int32 origin_name = 2;</code>
   */
  public int getOriginName() {
    return originName_;
  }

  private void initFields() {
    branch_ = java.util.Collections.emptyList();
    originName_ = 0;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    for (int i = 0; i < getBranchCount(); i++) {
      if (!getBranch(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < branch_.size(); i++) {
      output.writeMessage(1, branch_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(2, originName_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < branch_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, branch_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(2, originName_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static IrWhen parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrWhen parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrWhen parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrWhen parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrWhen parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrWhen parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static IrWhen parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static IrWhen parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static IrWhen parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrWhen parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(IrWhen prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen)
      IrWhenOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhen_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhen_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              IrWhen.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getBranchFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (branchBuilder_ == null) {
        branch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        branchBuilder_.clear();
      }
      originName_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrWhen_descriptor;
    }

    public IrWhen getDefaultInstanceForType() {
      return IrWhen.getDefaultInstance();
    }

    public IrWhen build() {
      IrWhen result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public IrWhen buildPartial() {
      IrWhen result = new IrWhen(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (branchBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          branch_ = java.util.Collections.unmodifiableList(branch_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.branch_ = branch_;
      } else {
        result.branch_ = branchBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      result.originName_ = originName_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof IrWhen) {
        return mergeFrom((IrWhen)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(IrWhen other) {
      if (other == IrWhen.getDefaultInstance()) return this;
      if (branchBuilder_ == null) {
        if (!other.branch_.isEmpty()) {
          if (branch_.isEmpty()) {
            branch_ = other.branch_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBranchIsMutable();
            branch_.addAll(other.branch_);
          }
          onChanged();
        }
      } else {
        if (!other.branch_.isEmpty()) {
          if (branchBuilder_.isEmpty()) {
            branchBuilder_.dispose();
            branchBuilder_ = null;
            branch_ = other.branch_;
            bitField0_ = (bitField0_ & ~0x00000001);
            branchBuilder_ = 
              org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getBranchFieldBuilder() : null;
          } else {
            branchBuilder_.addAllMessages(other.branch_);
          }
        }
      }
      if (other.hasOriginName()) {
        setOriginName(other.getOriginName());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      for (int i = 0; i < getBranchCount(); i++) {
        if (!getBranch(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      IrWhen parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (IrWhen) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<IrStatement> branch_ =
      java.util.Collections.emptyList();
    private void ensureBranchIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        branch_ = new java.util.ArrayList<IrStatement>(branch_);
        bitField0_ |= 0x00000001;
       }
    }

    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrStatement, IrStatement.Builder, IrStatementOrBuilder> branchBuilder_;

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public java.util.List<IrStatement> getBranchList() {
      if (branchBuilder_ == null) {
        return java.util.Collections.unmodifiableList(branch_);
      } else {
        return branchBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public int getBranchCount() {
      if (branchBuilder_ == null) {
        return branch_.size();
      } else {
        return branchBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public IrStatement getBranch(int index) {
      if (branchBuilder_ == null) {
        return branch_.get(index);
      } else {
        return branchBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder setBranch(
        int index, IrStatement value) {
      if (branchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBranchIsMutable();
        branch_.set(index, value);
        onChanged();
      } else {
        branchBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder setBranch(
        int index, IrStatement.Builder builderForValue) {
      if (branchBuilder_ == null) {
        ensureBranchIsMutable();
        branch_.set(index, builderForValue.build());
        onChanged();
      } else {
        branchBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder addBranch(IrStatement value) {
      if (branchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBranchIsMutable();
        branch_.add(value);
        onChanged();
      } else {
        branchBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder addBranch(
        int index, IrStatement value) {
      if (branchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBranchIsMutable();
        branch_.add(index, value);
        onChanged();
      } else {
        branchBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder addBranch(
        IrStatement.Builder builderForValue) {
      if (branchBuilder_ == null) {
        ensureBranchIsMutable();
        branch_.add(builderForValue.build());
        onChanged();
      } else {
        branchBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder addBranch(
        int index, IrStatement.Builder builderForValue) {
      if (branchBuilder_ == null) {
        ensureBranchIsMutable();
        branch_.add(index, builderForValue.build());
        onChanged();
      } else {
        branchBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder addAllBranch(
        Iterable<? extends IrStatement> values) {
      if (branchBuilder_ == null) {
        ensureBranchIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, branch_);
        onChanged();
      } else {
        branchBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder clearBranch() {
      if (branchBuilder_ == null) {
        branch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        branchBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public Builder removeBranch(int index) {
      if (branchBuilder_ == null) {
        ensureBranchIsMutable();
        branch_.remove(index);
        onChanged();
      } else {
        branchBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public IrStatement.Builder getBranchBuilder(
        int index) {
      return getBranchFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public IrStatementOrBuilder getBranchOrBuilder(
        int index) {
      if (branchBuilder_ == null) {
        return branch_.get(index);  } else {
        return branchBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public java.util.List<? extends IrStatementOrBuilder>
         getBranchOrBuilderList() {
      if (branchBuilder_ != null) {
        return branchBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(branch_);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public IrStatement.Builder addBranchBuilder() {
      return getBranchFieldBuilder().addBuilder(
          IrStatement.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public IrStatement.Builder addBranchBuilder(
        int index) {
      return getBranchFieldBuilder().addBuilder(
          index, IrStatement.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement branch = 1;</code>
     */
    public java.util.List<IrStatement.Builder>
         getBranchBuilderList() {
      return getBranchFieldBuilder().getBuilderList();
    }
    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrStatement, IrStatement.Builder, IrStatementOrBuilder>
        getBranchFieldBuilder() {
      if (branchBuilder_ == null) {
        branchBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            IrStatement, IrStatement.Builder, IrStatementOrBuilder>(
                branch_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        branch_ = null;
      }
      return branchBuilder_;
    }

    private int originName_ ;
    /**
     * <code>optional int32 origin_name = 2;</code>
     */
    public boolean hasOriginName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 origin_name = 2;</code>
     */
    public int getOriginName() {
      return originName_;
    }
    /**
     * <code>optional int32 origin_name = 2;</code>
     */
    public Builder setOriginName(int value) {
      bitField0_ |= 0x00000002;
      originName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 origin_name = 2;</code>
     */
    public Builder clearOriginName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      originName_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen)
  }

  static {
    defaultInstance = new IrWhen(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrWhen)
}
