// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
 */
public final class IrFile extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
    IrFileOrBuilder {
  // Use IrFile.newBuilder() to construct.
  private IrFile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrFile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrFile defaultInstance;
  public static IrFile getDefaultInstance() {
    return defaultInstance;
  }

  public IrFile getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrFile(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              declarationId_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            declarationId_.add(input.readInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              declarationId_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              declarationId_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 18: {
            FileEntry.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = fileEntry_.toBuilder();
            }
            fileEntry_ = input.readMessage(FileEntry.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fileEntry_);
              fileEntry_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 24: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              fqName_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            fqName_.add(input.readInt32());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              fqName_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              fqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              annotation_ = new java.util.ArrayList<IrConstructorCall>();
              mutable_bitField0_ |= 0x00000008;
            }
            annotation_.add(input.readMessage(IrConstructorCall.PARSER, extensionRegistry));
            break;
          }
          case 40: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              explicitlyExportedToCompiler_ = new java.util.ArrayList<Long>();
              mutable_bitField0_ |= 0x00000010;
            }
            explicitlyExportedToCompiler_.add(input.readInt64());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              explicitlyExportedToCompiler_ = new java.util.ArrayList<Long>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              explicitlyExportedToCompiler_.add(input.readInt64());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        annotation_ = java.util.Collections.unmodifiableList(annotation_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrFile_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrFile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            IrFile.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrFile> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrFile>() {
    public IrFile parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrFile(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<IrFile> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int DECLARATION_ID_FIELD_NUMBER = 1;
  private java.util.List<Integer> declarationId_;
  /**
   * <code>repeated int32 declaration_id = 1 [packed = true];</code>
   */
  public java.util.List<Integer>
      getDeclarationIdList() {
    return declarationId_;
  }
  /**
   * <code>repeated int32 declaration_id = 1 [packed = true];</code>
   */
  public int getDeclarationIdCount() {
    return declarationId_.size();
  }
  /**
   * <code>repeated int32 declaration_id = 1 [packed = true];</code>
   */
  public int getDeclarationId(int index) {
    return declarationId_.get(index);
  }
  private int declarationIdMemoizedSerializedSize = -1;

  public static final int FILE_ENTRY_FIELD_NUMBER = 2;
  private FileEntry fileEntry_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  public boolean hasFileEntry() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  public FileEntry getFileEntry() {
    return fileEntry_;
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
   */
  public FileEntryOrBuilder getFileEntryOrBuilder() {
    return fileEntry_;
  }

  public static final int FQ_NAME_FIELD_NUMBER = 3;
  private java.util.List<Integer> fqName_;
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public java.util.List<Integer>
      getFqNameList() {
    return fqName_;
  }
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public int getFqNameCount() {
    return fqName_.size();
  }
  /**
   * <code>repeated int32 fq_name = 3 [packed = true];</code>
   */
  public int getFqName(int index) {
    return fqName_.get(index);
  }
  private int fqNameMemoizedSerializedSize = -1;

  public static final int ANNOTATION_FIELD_NUMBER = 4;
  private java.util.List<IrConstructorCall> annotation_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public java.util.List<IrConstructorCall> getAnnotationList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public java.util.List<? extends IrConstructorCallOrBuilder>
      getAnnotationOrBuilderList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public int getAnnotationCount() {
    return annotation_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public IrConstructorCall getAnnotation(int index) {
    return annotation_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
   */
  public IrConstructorCallOrBuilder getAnnotationOrBuilder(
      int index) {
    return annotation_.get(index);
  }

  public static final int EXPLICITLY_EXPORTED_TO_COMPILER_FIELD_NUMBER = 5;
  private java.util.List<Long> explicitlyExportedToCompiler_;
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
   */
  public java.util.List<Long>
      getExplicitlyExportedToCompilerList() {
    return explicitlyExportedToCompiler_;
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
   */
  public int getExplicitlyExportedToCompilerCount() {
    return explicitlyExportedToCompiler_.size();
  }
  /**
   * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
   */
  public long getExplicitlyExportedToCompiler(int index) {
    return explicitlyExportedToCompiler_.get(index);
  }
  private int explicitlyExportedToCompilerMemoizedSerializedSize = -1;

  private void initFields() {
    declarationId_ = java.util.Collections.emptyList();
    fileEntry_ = FileEntry.getDefaultInstance();
    fqName_ = java.util.Collections.emptyList();
    annotation_ = java.util.Collections.emptyList();
    explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasFileEntry()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getFileEntry().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getAnnotationCount(); i++) {
      if (!getAnnotation(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getDeclarationIdList().size() > 0) {
      output.writeRawVarint32(10);
      output.writeRawVarint32(declarationIdMemoizedSerializedSize);
    }
    for (int i = 0; i < declarationId_.size(); i++) {
      output.writeInt32NoTag(declarationId_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(2, fileEntry_);
    }
    if (getFqNameList().size() > 0) {
      output.writeRawVarint32(26);
      output.writeRawVarint32(fqNameMemoizedSerializedSize);
    }
    for (int i = 0; i < fqName_.size(); i++) {
      output.writeInt32NoTag(fqName_.get(i));
    }
    for (int i = 0; i < annotation_.size(); i++) {
      output.writeMessage(4, annotation_.get(i));
    }
    if (getExplicitlyExportedToCompilerList().size() > 0) {
      output.writeRawVarint32(42);
      output.writeRawVarint32(explicitlyExportedToCompilerMemoizedSerializedSize);
    }
    for (int i = 0; i < explicitlyExportedToCompiler_.size(); i++) {
      output.writeInt64NoTag(explicitlyExportedToCompiler_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < declarationId_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(declarationId_.get(i));
      }
      size += dataSize;
      if (!getDeclarationIdList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      declarationIdMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, fileEntry_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < fqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(fqName_.get(i));
      }
      size += dataSize;
      if (!getFqNameList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      fqNameMemoizedSerializedSize = dataSize;
    }
    for (int i = 0; i < annotation_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, annotation_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < explicitlyExportedToCompiler_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(explicitlyExportedToCompiler_.get(i));
      }
      size += dataSize;
      if (!getExplicitlyExportedToCompilerList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      explicitlyExportedToCompilerMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrFile parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrFile parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrFile parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static IrFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static IrFile parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrFile parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(IrFile prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFile}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
      IrFileOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrFile_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              IrFile.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFile.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getFileEntryFieldBuilder();
        getAnnotationFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      declarationId_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      if (fileEntryBuilder_ == null) {
        fileEntry_ = FileEntry.getDefaultInstance();
      } else {
        fileEntryBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      if (annotationBuilder_ == null) {
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        annotationBuilder_.clear();
      }
      explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrFile_descriptor;
    }

    public IrFile getDefaultInstanceForType() {
      return IrFile.getDefaultInstance();
    }

    public IrFile build() {
      IrFile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public IrFile buildPartial() {
      IrFile result = new IrFile(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = java.util.Collections.unmodifiableList(declarationId_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.declarationId_ = declarationId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      if (fileEntryBuilder_ == null) {
        result.fileEntry_ = fileEntry_;
      } else {
        result.fileEntry_ = fileEntryBuilder_.build();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.fqName_ = fqName_;
      if (annotationBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.annotation_ = annotation_;
      } else {
        result.annotation_ = annotationBuilder_.build();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.explicitlyExportedToCompiler_ = explicitlyExportedToCompiler_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof IrFile) {
        return mergeFrom((IrFile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(IrFile other) {
      if (other == IrFile.getDefaultInstance()) return this;
      if (!other.declarationId_.isEmpty()) {
        if (declarationId_.isEmpty()) {
          declarationId_ = other.declarationId_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureDeclarationIdIsMutable();
          declarationId_.addAll(other.declarationId_);
        }
        onChanged();
      }
      if (other.hasFileEntry()) {
        mergeFileEntry(other.getFileEntry());
      }
      if (!other.fqName_.isEmpty()) {
        if (fqName_.isEmpty()) {
          fqName_ = other.fqName_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureFqNameIsMutable();
          fqName_.addAll(other.fqName_);
        }
        onChanged();
      }
      if (annotationBuilder_ == null) {
        if (!other.annotation_.isEmpty()) {
          if (annotation_.isEmpty()) {
            annotation_ = other.annotation_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAnnotationIsMutable();
            annotation_.addAll(other.annotation_);
          }
          onChanged();
        }
      } else {
        if (!other.annotation_.isEmpty()) {
          if (annotationBuilder_.isEmpty()) {
            annotationBuilder_.dispose();
            annotationBuilder_ = null;
            annotation_ = other.annotation_;
            bitField0_ = (bitField0_ & ~0x00000008);
            annotationBuilder_ = 
              org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getAnnotationFieldBuilder() : null;
          } else {
            annotationBuilder_.addAllMessages(other.annotation_);
          }
        }
      }
      if (!other.explicitlyExportedToCompiler_.isEmpty()) {
        if (explicitlyExportedToCompiler_.isEmpty()) {
          explicitlyExportedToCompiler_ = other.explicitlyExportedToCompiler_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureExplicitlyExportedToCompilerIsMutable();
          explicitlyExportedToCompiler_.addAll(other.explicitlyExportedToCompiler_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasFileEntry()) {
        
        return false;
      }
      if (!getFileEntry().isInitialized()) {
        
        return false;
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      IrFile parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (IrFile) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<Integer> declarationId_ = java.util.Collections.emptyList();
    private void ensureDeclarationIdIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        declarationId_ = new java.util.ArrayList<Integer>(declarationId_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public java.util.List<Integer>
        getDeclarationIdList() {
      return java.util.Collections.unmodifiableList(declarationId_);
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public int getDeclarationIdCount() {
      return declarationId_.size();
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public int getDeclarationId(int index) {
      return declarationId_.get(index);
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public Builder setDeclarationId(
        int index, int value) {
      ensureDeclarationIdIsMutable();
      declarationId_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public Builder addDeclarationId(int value) {
      ensureDeclarationIdIsMutable();
      declarationId_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public Builder addAllDeclarationId(
        Iterable<? extends Integer> values) {
      ensureDeclarationIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, declarationId_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    public Builder clearDeclarationId() {
      declarationId_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private FileEntry fileEntry_ = FileEntry.getDefaultInstance();
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        FileEntry, FileEntry.Builder, FileEntryOrBuilder> fileEntryBuilder_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public boolean hasFileEntry() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public FileEntry getFileEntry() {
      if (fileEntryBuilder_ == null) {
        return fileEntry_;
      } else {
        return fileEntryBuilder_.getMessage();
      }
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(FileEntry value) {
      if (fileEntryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fileEntry_ = value;
        onChanged();
      } else {
        fileEntryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder setFileEntry(
        FileEntry.Builder builderForValue) {
      if (fileEntryBuilder_ == null) {
        fileEntry_ = builderForValue.build();
        onChanged();
      } else {
        fileEntryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder mergeFileEntry(FileEntry value) {
      if (fileEntryBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            fileEntry_ != FileEntry.getDefaultInstance()) {
          fileEntry_ =
            FileEntry.newBuilder(fileEntry_).mergeFrom(value).buildPartial();
        } else {
          fileEntry_ = value;
        }
        onChanged();
      } else {
        fileEntryBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public Builder clearFileEntry() {
      if (fileEntryBuilder_ == null) {
        fileEntry_ = FileEntry.getDefaultInstance();
        onChanged();
      } else {
        fileEntryBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public FileEntry.Builder getFileEntryBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getFileEntryFieldBuilder().getBuilder();
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    public FileEntryOrBuilder getFileEntryOrBuilder() {
      if (fileEntryBuilder_ != null) {
        return fileEntryBuilder_.getMessageOrBuilder();
      } else {
        return fileEntry_;
      }
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        FileEntry, FileEntry.Builder, FileEntryOrBuilder>
        getFileEntryFieldBuilder() {
      if (fileEntryBuilder_ == null) {
        fileEntryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            FileEntry, FileEntry.Builder, FileEntryOrBuilder>(
                getFileEntry(),
                getParentForChildren(),
                isClean());
        fileEntry_ = null;
      }
      return fileEntryBuilder_;
    }

    private java.util.List<Integer> fqName_ = java.util.Collections.emptyList();
    private void ensureFqNameIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        fqName_ = new java.util.ArrayList<Integer>(fqName_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public java.util.List<Integer>
        getFqNameList() {
      return java.util.Collections.unmodifiableList(fqName_);
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public int getFqNameCount() {
      return fqName_.size();
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public int getFqName(int index) {
      return fqName_.get(index);
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder setFqName(
        int index, int value) {
      ensureFqNameIsMutable();
      fqName_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder addFqName(int value) {
      ensureFqNameIsMutable();
      fqName_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder addAllFqName(
        Iterable<? extends Integer> values) {
      ensureFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, fqName_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    public Builder clearFqName() {
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private java.util.List<IrConstructorCall> annotation_ =
      java.util.Collections.emptyList();
    private void ensureAnnotationIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        annotation_ = new java.util.ArrayList<IrConstructorCall>(annotation_);
        bitField0_ |= 0x00000008;
       }
    }

    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder> annotationBuilder_;

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public java.util.List<IrConstructorCall> getAnnotationList() {
      if (annotationBuilder_ == null) {
        return java.util.Collections.unmodifiableList(annotation_);
      } else {
        return annotationBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public int getAnnotationCount() {
      if (annotationBuilder_ == null) {
        return annotation_.size();
      } else {
        return annotationBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public IrConstructorCall getAnnotation(int index) {
      if (annotationBuilder_ == null) {
        return annotation_.get(index);
      } else {
        return annotationBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder setAnnotation(
        int index, IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.set(index, value);
        onChanged();
      } else {
        annotationBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder setAnnotation(
        int index, IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.set(index, builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(value);
        onChanged();
      } else {
        annotationBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        int index, IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(index, value);
        onChanged();
      } else {
        annotationBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.add(builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAnnotation(
        int index, IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.add(index, builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder addAllAnnotation(
        Iterable<? extends IrConstructorCall> values) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, annotation_);
        onChanged();
      } else {
        annotationBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder clearAnnotation() {
      if (annotationBuilder_ == null) {
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        annotationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public Builder removeAnnotation(int index) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.remove(index);
        onChanged();
      } else {
        annotationBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public IrConstructorCall.Builder getAnnotationBuilder(
        int index) {
      return getAnnotationFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public IrConstructorCallOrBuilder getAnnotationOrBuilder(
        int index) {
      if (annotationBuilder_ == null) {
        return annotation_.get(index);  } else {
        return annotationBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public java.util.List<? extends IrConstructorCallOrBuilder>
         getAnnotationOrBuilderList() {
      if (annotationBuilder_ != null) {
        return annotationBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(annotation_);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public IrConstructorCall.Builder addAnnotationBuilder() {
      return getAnnotationFieldBuilder().addBuilder(
          IrConstructorCall.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public IrConstructorCall.Builder addAnnotationBuilder(
        int index) {
      return getAnnotationFieldBuilder().addBuilder(
          index, IrConstructorCall.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    public java.util.List<IrConstructorCall.Builder>
         getAnnotationBuilderList() {
      return getAnnotationFieldBuilder().getBuilderList();
    }
    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder>
        getAnnotationFieldBuilder() {
      if (annotationBuilder_ == null) {
        annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder>(
                annotation_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        annotation_ = null;
      }
      return annotationBuilder_;
    }

    private java.util.List<Long> explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
    private void ensureExplicitlyExportedToCompilerIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        explicitlyExportedToCompiler_ = new java.util.ArrayList<Long>(explicitlyExportedToCompiler_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public java.util.List<Long>
        getExplicitlyExportedToCompilerList() {
      return java.util.Collections.unmodifiableList(explicitlyExportedToCompiler_);
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public int getExplicitlyExportedToCompilerCount() {
      return explicitlyExportedToCompiler_.size();
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public long getExplicitlyExportedToCompiler(int index) {
      return explicitlyExportedToCompiler_.get(index);
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public Builder setExplicitlyExportedToCompiler(
        int index, long value) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public Builder addExplicitlyExportedToCompiler(long value) {
      ensureExplicitlyExportedToCompilerIsMutable();
      explicitlyExportedToCompiler_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public Builder addAllExplicitlyExportedToCompiler(
        Iterable<? extends Long> values) {
      ensureExplicitlyExportedToCompilerIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, explicitlyExportedToCompiler_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    public Builder clearExplicitlyExportedToCompiler() {
      explicitlyExportedToCompiler_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
  }

  static {
    defaultInstance = new IrFile(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
}
