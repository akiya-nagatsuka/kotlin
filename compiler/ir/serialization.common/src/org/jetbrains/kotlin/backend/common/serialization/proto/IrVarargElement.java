// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement}
 */
public final class IrVarargElement extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
    IrVarargElementOrBuilder {
  // Use IrVarargElement.newBuilder() to construct.
  private IrVarargElement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrVarargElement(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrVarargElement defaultInstance;
  public static IrVarargElement getDefaultInstance() {
    return defaultInstance;
  }

  public IrVarargElement getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrVarargElement(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder subBuilder = null;
            if (varargElementCase_ == 1) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_).toBuilder();
            }
            varargElement_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_);
              varargElement_ = subBuilder.buildPartial();
            }
            varargElementCase_ = 1;
            break;
          }
          case 18: {
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder subBuilder = null;
            if (varargElementCase_ == 2) {
              subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_).toBuilder();
            }
            varargElement_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_);
              varargElement_ = subBuilder.buildPartial();
            }
            varargElementCase_ = 2;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrVarargElement_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrVarargElement_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrVarargElement> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrVarargElement>() {
    public IrVarargElement parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrVarargElement(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrVarargElement> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  private int varargElementCase_ = 0;
  private java.lang.Object varargElement_;
  public enum VarargElementCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    EXPRESSION(1),
    SPREAD_ELEMENT(2),
    VARARGELEMENT_NOT_SET(0);
    private int value = 0;
    private VarargElementCase(int value) {
      this.value = value;
    }
    public static VarargElementCase valueOf(int value) {
      switch (value) {
        case 1: return EXPRESSION;
        case 2: return SPREAD_ELEMENT;
        case 0: return VARARGELEMENT_NOT_SET;
        default: throw new java.lang.IllegalArgumentException(
          "Value is undefined for this oneof enum.");
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public VarargElementCase
  getVarargElementCase() {
    return VarargElementCase.valueOf(
        varargElementCase_);
  }

  public static final int EXPRESSION_FIELD_NUMBER = 1;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
   */
  public boolean hasExpression() {
    return varargElementCase_ == 1;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
    if (varargElementCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
    if (varargElementCase_ == 1) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
  }

  public static final int SPREAD_ELEMENT_FIELD_NUMBER = 2;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
   */
  public boolean hasSpreadElement() {
    return varargElementCase_ == 2;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement getSpreadElement() {
    if (varargElementCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElementOrBuilder getSpreadElementOrBuilder() {
    if (varargElementCase_ == 2) {
       return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_;
    }
    return org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
  }

  private void initFields() {
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (hasExpression()) {
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasSpreadElement()) {
      if (!getSpreadElement().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (varargElementCase_ == 1) {
      output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_);
    }
    if (varargElementCase_ == 2) {
      output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (varargElementCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_);
    }
    if (varargElementCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElementOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrVarargElement_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrVarargElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      varargElementCase_ = 0;
      varargElement_ = null;
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrVarargElement_descriptor;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (varargElementCase_ == 1) {
        if (expressionBuilder_ == null) {
          result.varargElement_ = varargElement_;
        } else {
          result.varargElement_ = expressionBuilder_.build();
        }
      }
      if (varargElementCase_ == 2) {
        if (spreadElementBuilder_ == null) {
          result.varargElement_ = varargElement_;
        } else {
          result.varargElement_ = spreadElementBuilder_.build();
        }
      }
      result.bitField0_ = to_bitField0_;
      result.varargElementCase_ = varargElementCase_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.getDefaultInstance()) return this;
      switch (other.getVarargElementCase()) {
        case EXPRESSION: {
          mergeExpression(other.getExpression());
          break;
        }
        case SPREAD_ELEMENT: {
          mergeSpreadElement(other.getSpreadElement());
          break;
        }
        case VARARGELEMENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          
          return false;
        }
      }
      if (hasSpreadElement()) {
        if (!getSpreadElement().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int varargElementCase_ = 0;
    private java.lang.Object varargElement_;
    public VarargElementCase
        getVarargElementCase() {
      return VarargElementCase.valueOf(
          varargElementCase_);
    }

    public Builder clearVarargElement() {
      varargElementCase_ = 0;
      varargElement_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> expressionBuilder_;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public boolean hasExpression() {
      return varargElementCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (expressionBuilder_ == null) {
        if (varargElementCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      } else {
        if (varargElementCase_ == 1) {
          return expressionBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (expressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        varargElement_ = value;
        onChanged();
      } else {
        expressionBuilder_.setMessage(value);
      }
      varargElementCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public Builder setExpression(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (expressionBuilder_ == null) {
        varargElement_ = builderForValue.build();
        onChanged();
      } else {
        expressionBuilder_.setMessage(builderForValue.build());
      }
      varargElementCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (expressionBuilder_ == null) {
        if (varargElementCase_ == 1 &&
            varargElement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
          varargElement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_)
              .mergeFrom(value).buildPartial();
        } else {
          varargElement_ = value;
        }
        onChanged();
      } else {
        if (varargElementCase_ == 1) {
          expressionBuilder_.mergeFrom(value);
        }
        expressionBuilder_.setMessage(value);
      }
      varargElementCase_ = 1;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public Builder clearExpression() {
      if (expressionBuilder_ == null) {
        if (varargElementCase_ == 1) {
          varargElementCase_ = 0;
          varargElement_ = null;
          onChanged();
        }
      } else {
        if (varargElementCase_ == 1) {
          varargElementCase_ = 0;
          varargElement_ = null;
        }
        expressionBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder getExpressionBuilder() {
      return getExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getExpressionOrBuilder() {
      if ((varargElementCase_ == 1) && (expressionBuilder_ != null)) {
        return expressionBuilder_.getMessageOrBuilder();
      } else {
        if (varargElementCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
        getExpressionFieldBuilder() {
      if (expressionBuilder_ == null) {
        if (!(varargElementCase_ == 1)) {
          varargElement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
        }
        expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) varargElement_,
                getParentForChildren(),
                isClean());
        varargElement_ = null;
      }
      varargElementCase_ = 1;
      return expressionBuilder_;
    }

    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElementOrBuilder> spreadElementBuilder_;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public boolean hasSpreadElement() {
      return varargElementCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement getSpreadElement() {
      if (spreadElementBuilder_ == null) {
        if (varargElementCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
      } else {
        if (varargElementCase_ == 2) {
          return spreadElementBuilder_.getMessage();
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public Builder setSpreadElement(org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement value) {
      if (spreadElementBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        varargElement_ = value;
        onChanged();
      } else {
        spreadElementBuilder_.setMessage(value);
      }
      varargElementCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public Builder setSpreadElement(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder builderForValue) {
      if (spreadElementBuilder_ == null) {
        varargElement_ = builderForValue.build();
        onChanged();
      } else {
        spreadElementBuilder_.setMessage(builderForValue.build());
      }
      varargElementCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public Builder mergeSpreadElement(org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement value) {
      if (spreadElementBuilder_ == null) {
        if (varargElementCase_ == 2 &&
            varargElement_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance()) {
          varargElement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_)
              .mergeFrom(value).buildPartial();
        } else {
          varargElement_ = value;
        }
        onChanged();
      } else {
        if (varargElementCase_ == 2) {
          spreadElementBuilder_.mergeFrom(value);
        }
        spreadElementBuilder_.setMessage(value);
      }
      varargElementCase_ = 2;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public Builder clearSpreadElement() {
      if (spreadElementBuilder_ == null) {
        if (varargElementCase_ == 2) {
          varargElementCase_ = 0;
          varargElement_ = null;
          onChanged();
        }
      } else {
        if (varargElementCase_ == 2) {
          varargElementCase_ = 0;
          varargElement_ = null;
        }
        spreadElementBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder getSpreadElementBuilder() {
      return getSpreadElementFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElementOrBuilder getSpreadElementOrBuilder() {
      if ((varargElementCase_ == 2) && (spreadElementBuilder_ != null)) {
        return spreadElementBuilder_.getMessageOrBuilder();
      } else {
        if (varargElementCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElementOrBuilder> 
        getSpreadElementFieldBuilder() {
      if (spreadElementBuilder_ == null) {
        if (!(varargElementCase_ == 2)) {
          varargElement_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.getDefaultInstance();
        }
        spreadElementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElementOrBuilder>(
                (org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement) varargElement_,
                getParentForChildren(),
                isClean());
        varargElement_ = null;
      }
      varargElementCase_ = 2;
      return spreadElementBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
  }

  static {
    defaultInstance = new IrVarargElement(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
}
