// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
 */
public final class FileEntry extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
    FileEntryOrBuilder {
  // Use FileEntry.newBuilder() to construct.
  private FileEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private FileEntry(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final FileEntry defaultInstance;
  public static FileEntry getDefaultInstance() {
    return defaultInstance;
  }

  public FileEntry getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private FileEntry(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            name_ = bs;
            break;
          }
          case 16: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              lineStartOffset_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            lineStartOffset_.add(input.readInt32());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              lineStartOffset_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              lineStartOffset_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        lineStartOffset_ = java.util.Collections.unmodifiableList(lineStartOffset_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            FileEntry.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<FileEntry> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<FileEntry>() {
    public FileEntry parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new FileEntry(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<FileEntry> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private Object name_;
  /**
   * <code>required string name = 1;</code>
   */
  public boolean hasName() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required string name = 1;</code>
   */
  public String getName() {
    Object ref = name_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      org.jetbrains.kotlin.protobuf.ByteString bs = 
          (org.jetbrains.kotlin.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        name_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string name = 1;</code>
   */
  public org.jetbrains.kotlin.protobuf.ByteString
      getNameBytes() {
    Object ref = name_;
    if (ref instanceof String) {
      org.jetbrains.kotlin.protobuf.ByteString b = 
          org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      name_ = b;
      return b;
    } else {
      return (org.jetbrains.kotlin.protobuf.ByteString) ref;
    }
  }

  public static final int LINE_START_OFFSET_FIELD_NUMBER = 2;
  private java.util.List<Integer> lineStartOffset_;
  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   */
  public java.util.List<Integer>
      getLineStartOffsetList() {
    return lineStartOffset_;
  }
  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   */
  public int getLineStartOffsetCount() {
    return lineStartOffset_.size();
  }
  /**
   * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
   */
  public int getLineStartOffset(int index) {
    return lineStartOffset_.get(index);
  }
  private int lineStartOffsetMemoizedSerializedSize = -1;

  private void initFields() {
    name_ = "";
    lineStartOffset_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBytes(1, getNameBytes());
    }
    if (getLineStartOffsetList().size() > 0) {
      output.writeRawVarint32(18);
      output.writeRawVarint32(lineStartOffsetMemoizedSerializedSize);
    }
    for (int i = 0; i < lineStartOffset_.size(); i++) {
      output.writeInt32NoTag(lineStartOffset_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBytesSize(1, getNameBytes());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < lineStartOffset_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(lineStartOffset_.get(i));
      }
      size += dataSize;
      if (!getLineStartOffsetList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      lineStartOffsetMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FileEntry parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FileEntry parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FileEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static FileEntry parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static FileEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static FileEntry parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(FileEntry prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
      FileEntryOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FileEntry.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      name_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      lineStartOffset_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
    }

    public FileEntry getDefaultInstanceForType() {
      return FileEntry.getDefaultInstance();
    }

    public FileEntry build() {
      FileEntry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public FileEntry buildPartial() {
      FileEntry result = new FileEntry(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.name_ = name_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        lineStartOffset_ = java.util.Collections.unmodifiableList(lineStartOffset_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.lineStartOffset_ = lineStartOffset_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof FileEntry) {
        return mergeFrom((FileEntry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(FileEntry other) {
      if (other == FileEntry.getDefaultInstance()) return this;
      if (other.hasName()) {
        bitField0_ |= 0x00000001;
        name_ = other.name_;
        onChanged();
      }
      if (!other.lineStartOffset_.isEmpty()) {
        if (lineStartOffset_.isEmpty()) {
          lineStartOffset_ = other.lineStartOffset_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureLineStartOffsetIsMutable();
          lineStartOffset_.addAll(other.lineStartOffset_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasName()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      FileEntry parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (FileEntry) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private Object name_ = "";
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public String getName() {
      Object ref = name_;
      if (!(ref instanceof String)) {
        org.jetbrains.kotlin.protobuf.ByteString bs =
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public Builder setName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string name = 1;</code>
     */
    public Builder clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>required string name = 1;</code>
     */
    public Builder setNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
      onChanged();
      return this;
    }

    private java.util.List<Integer> lineStartOffset_ = java.util.Collections.emptyList();
    private void ensureLineStartOffsetIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        lineStartOffset_ = new java.util.ArrayList<Integer>(lineStartOffset_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public java.util.List<Integer>
        getLineStartOffsetList() {
      return java.util.Collections.unmodifiableList(lineStartOffset_);
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public int getLineStartOffsetCount() {
      return lineStartOffset_.size();
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public int getLineStartOffset(int index) {
      return lineStartOffset_.get(index);
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public Builder setLineStartOffset(
        int index, int value) {
      ensureLineStartOffsetIsMutable();
      lineStartOffset_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public Builder addLineStartOffset(int value) {
      ensureLineStartOffsetIsMutable();
      lineStartOffset_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public Builder addAllLineStartOffset(
        Iterable<? extends Integer> values) {
      ensureLineStartOffsetIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, lineStartOffset_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    public Builder clearLineStartOffset() {
      lineStartOffset_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
  }

  static {
    defaultInstance = new FileEntry(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
}
