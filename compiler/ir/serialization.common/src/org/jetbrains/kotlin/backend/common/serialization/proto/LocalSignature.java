// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature}
 */
public final class LocalSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature)
    LocalSignatureOrBuilder {
  // Use LocalSignature.newBuilder() to construct.
  private LocalSignature(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private LocalSignature(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final LocalSignature defaultInstance;
  public static LocalSignature getDefaultInstance() {
    return defaultInstance;
  }

  public LocalSignature getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private LocalSignature(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              localFqName_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            localFqName_.add(input.readInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              localFqName_ = new java.util.ArrayList<Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              localFqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 16: {
            bitField0_ |= 0x00000001;
            localHash_ = input.readInt64();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000002;
            debugInfo_ = input.readInt32();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        localFqName_ = java.util.Collections.unmodifiableList(localFqName_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_LocalSignature_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_LocalSignature_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            LocalSignature.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<LocalSignature> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<LocalSignature>() {
    public LocalSignature parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new LocalSignature(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<LocalSignature> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int LOCAL_FQ_NAME_FIELD_NUMBER = 1;
  private java.util.List<Integer> localFqName_;
  /**
   * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
   */
  public java.util.List<Integer>
      getLocalFqNameList() {
    return localFqName_;
  }
  /**
   * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
   */
  public int getLocalFqNameCount() {
    return localFqName_.size();
  }
  /**
   * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
   */
  public int getLocalFqName(int index) {
    return localFqName_.get(index);
  }
  private int localFqNameMemoizedSerializedSize = -1;

  public static final int LOCAL_HASH_FIELD_NUMBER = 2;
  private long localHash_;
  /**
   * <code>optional int64 local_hash = 2;</code>
   */
  public boolean hasLocalHash() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int64 local_hash = 2;</code>
   */
  public long getLocalHash() {
    return localHash_;
  }

  public static final int DEBUG_INFO_FIELD_NUMBER = 3;
  private int debugInfo_;
  /**
   * <code>optional int32 debug_info = 3;</code>
   */
  public boolean hasDebugInfo() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional int32 debug_info = 3;</code>
   */
  public int getDebugInfo() {
    return debugInfo_;
  }

  private void initFields() {
    localFqName_ = java.util.Collections.emptyList();
    localHash_ = 0L;
    debugInfo_ = 0;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getLocalFqNameList().size() > 0) {
      output.writeRawVarint32(10);
      output.writeRawVarint32(localFqNameMemoizedSerializedSize);
    }
    for (int i = 0; i < localFqName_.size(); i++) {
      output.writeInt32NoTag(localFqName_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(2, localHash_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(3, debugInfo_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < localFqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(localFqName_.get(i));
      }
      size += dataSize;
      if (!getLocalFqNameList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      localFqNameMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(2, localHash_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(3, debugInfo_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static LocalSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static LocalSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static LocalSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static LocalSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static LocalSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static LocalSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static LocalSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static LocalSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static LocalSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static LocalSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(LocalSignature prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature)
      LocalSignatureOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_LocalSignature_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_LocalSignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              LocalSignature.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      localFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      localHash_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      debugInfo_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_LocalSignature_descriptor;
    }

    public LocalSignature getDefaultInstanceForType() {
      return LocalSignature.getDefaultInstance();
    }

    public LocalSignature build() {
      LocalSignature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public LocalSignature buildPartial() {
      LocalSignature result = new LocalSignature(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        localFqName_ = java.util.Collections.unmodifiableList(localFqName_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.localFqName_ = localFqName_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      result.localHash_ = localHash_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000002;
      }
      result.debugInfo_ = debugInfo_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof LocalSignature) {
        return mergeFrom((LocalSignature)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(LocalSignature other) {
      if (other == LocalSignature.getDefaultInstance()) return this;
      if (!other.localFqName_.isEmpty()) {
        if (localFqName_.isEmpty()) {
          localFqName_ = other.localFqName_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureLocalFqNameIsMutable();
          localFqName_.addAll(other.localFqName_);
        }
        onChanged();
      }
      if (other.hasLocalHash()) {
        setLocalHash(other.getLocalHash());
      }
      if (other.hasDebugInfo()) {
        setDebugInfo(other.getDebugInfo());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      LocalSignature parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (LocalSignature) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<Integer> localFqName_ = java.util.Collections.emptyList();
    private void ensureLocalFqNameIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        localFqName_ = new java.util.ArrayList<Integer>(localFqName_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public java.util.List<Integer>
        getLocalFqNameList() {
      return java.util.Collections.unmodifiableList(localFqName_);
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public int getLocalFqNameCount() {
      return localFqName_.size();
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public int getLocalFqName(int index) {
      return localFqName_.get(index);
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public Builder setLocalFqName(
        int index, int value) {
      ensureLocalFqNameIsMutable();
      localFqName_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public Builder addLocalFqName(int value) {
      ensureLocalFqNameIsMutable();
      localFqName_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public Builder addAllLocalFqName(
        Iterable<? extends Integer> values) {
      ensureLocalFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, localFqName_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 local_fq_name = 1 [packed = true];</code>
     */
    public Builder clearLocalFqName() {
      localFqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private long localHash_ ;
    /**
     * <code>optional int64 local_hash = 2;</code>
     */
    public boolean hasLocalHash() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 local_hash = 2;</code>
     */
    public long getLocalHash() {
      return localHash_;
    }
    /**
     * <code>optional int64 local_hash = 2;</code>
     */
    public Builder setLocalHash(long value) {
      bitField0_ |= 0x00000002;
      localHash_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 local_hash = 2;</code>
     */
    public Builder clearLocalHash() {
      bitField0_ = (bitField0_ & ~0x00000002);
      localHash_ = 0L;
      onChanged();
      return this;
    }

    private int debugInfo_ ;
    /**
     * <code>optional int32 debug_info = 3;</code>
     */
    public boolean hasDebugInfo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 debug_info = 3;</code>
     */
    public int getDebugInfo() {
      return debugInfo_;
    }
    /**
     * <code>optional int32 debug_info = 3;</code>
     */
    public Builder setDebugInfo(int value) {
      bitField0_ |= 0x00000004;
      debugInfo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 debug_info = 3;</code>
     */
    public Builder clearDebugInfo() {
      bitField0_ = (bitField0_ & ~0x00000004);
      debugInfo_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature)
  }

  static {
    defaultInstance = new LocalSignature(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature)
}
