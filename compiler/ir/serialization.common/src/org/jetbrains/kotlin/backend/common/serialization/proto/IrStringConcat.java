// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat}
 */
public final class IrStringConcat extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat)
    IrStringConcatOrBuilder {
  // Use IrStringConcat.newBuilder() to construct.
  private IrStringConcat(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrStringConcat(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrStringConcat defaultInstance;
  public static IrStringConcat getDefaultInstance() {
    return defaultInstance;
  }

  public IrStringConcat getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrStringConcat(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              argument_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression>();
              mutable_bitField0_ |= 0x00000001;
            }
            argument_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        argument_ = java.util.Collections.unmodifiableList(argument_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStringConcat_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStringConcat_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrStringConcat> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrStringConcat>() {
    public IrStringConcat parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrStringConcat(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrStringConcat> getParserForType() {
    return PARSER;
  }

  public static final int ARGUMENT_FIELD_NUMBER = 1;
  private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> argument_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
   */
  public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getArgumentList() {
    return argument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
   */
  public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
      getArgumentOrBuilderList() {
    return argument_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
   */
  public int getArgumentCount() {
    return argument_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument(int index) {
    return argument_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getArgumentOrBuilder(
      int index) {
    return argument_.get(index);
  }

  private void initFields() {
    argument_ = java.util.Collections.emptyList();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    for (int i = 0; i < getArgumentCount(); i++) {
      if (!getArgument(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < argument_.size(); i++) {
      output.writeMessage(1, argument_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < argument_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, argument_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcatOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStringConcat_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStringConcat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getArgumentFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (argumentBuilder_ == null) {
        argument_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        argumentBuilder_.clear();
      }
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrStringConcat_descriptor;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat(this);
      int from_bitField0_ = bitField0_;
      if (argumentBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          argument_ = java.util.Collections.unmodifiableList(argument_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.argument_ = argument_;
      } else {
        result.argument_ = argumentBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat.getDefaultInstance()) return this;
      if (argumentBuilder_ == null) {
        if (!other.argument_.isEmpty()) {
          if (argument_.isEmpty()) {
            argument_ = other.argument_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureArgumentIsMutable();
            argument_.addAll(other.argument_);
          }
          onChanged();
        }
      } else {
        if (!other.argument_.isEmpty()) {
          if (argumentBuilder_.isEmpty()) {
            argumentBuilder_.dispose();
            argumentBuilder_ = null;
            argument_ = other.argument_;
            bitField0_ = (bitField0_ & ~0x00000001);
            argumentBuilder_ = 
              org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getArgumentFieldBuilder() : null;
          } else {
            argumentBuilder_.addAllMessages(other.argument_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> argument_ =
      java.util.Collections.emptyList();
    private void ensureArgumentIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        argument_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression>(argument_);
        bitField0_ |= 0x00000001;
       }
    }

    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> argumentBuilder_;

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> getArgumentList() {
      if (argumentBuilder_ == null) {
        return java.util.Collections.unmodifiableList(argument_);
      } else {
        return argumentBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public int getArgumentCount() {
      if (argumentBuilder_ == null) {
        return argument_.size();
      } else {
        return argumentBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument(int index) {
      if (argumentBuilder_ == null) {
        return argument_.get(index);
      } else {
        return argumentBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (argumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentIsMutable();
        argument_.set(index, value);
        onChanged();
      } else {
        argumentBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder setArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (argumentBuilder_ == null) {
        ensureArgumentIsMutable();
        argument_.set(index, builderForValue.build());
        onChanged();
      } else {
        argumentBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder addArgument(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (argumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentIsMutable();
        argument_.add(value);
        onChanged();
      } else {
        argumentBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (argumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArgumentIsMutable();
        argument_.add(index, value);
        onChanged();
      } else {
        argumentBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder addArgument(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (argumentBuilder_ == null) {
        ensureArgumentIsMutable();
        argument_.add(builderForValue.build());
        onChanged();
      } else {
        argumentBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder addArgument(
        int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (argumentBuilder_ == null) {
        ensureArgumentIsMutable();
        argument_.add(index, builderForValue.build());
        onChanged();
      } else {
        argumentBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression> values) {
      if (argumentBuilder_ == null) {
        ensureArgumentIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, argument_);
        onChanged();
      } else {
        argumentBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder clearArgument() {
      if (argumentBuilder_ == null) {
        argument_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        argumentBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public Builder removeArgument(int index) {
      if (argumentBuilder_ == null) {
        ensureArgumentIsMutable();
        argument_.remove(index);
        onChanged();
      } else {
        argumentBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder getArgumentBuilder(
        int index) {
      return getArgumentFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      if (argumentBuilder_ == null) {
        return argument_.get(index);  } else {
        return argumentBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
         getArgumentOrBuilderList() {
      if (argumentBuilder_ != null) {
        return argumentBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(argument_);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder addArgumentBuilder() {
      return getArgumentFieldBuilder().addBuilder(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder addArgumentBuilder(
        int index) {
      return getArgumentFieldBuilder().addBuilder(
          index, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder> 
         getArgumentBuilderList() {
      return getArgumentFieldBuilder().getBuilderList();
    }
    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
        getArgumentFieldBuilder() {
      if (argumentBuilder_ == null) {
        argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder>(
                argument_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        argument_ = null;
      }
      return argumentBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat)
  }

  static {
    defaultInstance = new IrStringConcat(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrStringConcat)
}
