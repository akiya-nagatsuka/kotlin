// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType}
 */
public final class IrSimpleType extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType)
    IrSimpleTypeOrBuilder {
  // Use IrSimpleType.newBuilder() to construct.
  private IrSimpleType(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrSimpleType(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final IrSimpleType defaultInstance;
  public static IrSimpleType getDefaultInstance() {
    return defaultInstance;
  }

  public IrSimpleType getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private IrSimpleType(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              annotation_ = new java.util.ArrayList<IrConstructorCall>();
              mutable_bitField0_ |= 0x00000001;
            }
            annotation_.add(input.readMessage(IrConstructorCall.PARSER, extensionRegistry));
            break;
          }
          case 16: {
            bitField0_ |= 0x00000001;
            classifier_ = input.readInt64();
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            IrSimpleTypeNullability value = IrSimpleTypeNullability.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              nullability_ = value;
            }
            break;
          }
          case 32: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              argument_ = new java.util.ArrayList<Long>();
              mutable_bitField0_ |= 0x00000008;
            }
            argument_.add(input.readInt64());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
              argument_ = new java.util.ArrayList<Long>();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              argument_.add(input.readInt64());
            }
            input.popLimit(limit);
            break;
          }
          case 42: {
            IrTypeAbbreviation.Builder subBuilder = null;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              subBuilder = abbreviation_.toBuilder();
            }
            abbreviation_ = input.readMessage(IrTypeAbbreviation.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(abbreviation_);
              abbreviation_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        annotation_ = java.util.Collections.unmodifiableList(annotation_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        argument_ = java.util.Collections.unmodifiableList(argument_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrSimpleType_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrSimpleType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            IrSimpleType.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<IrSimpleType> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrSimpleType>() {
    public IrSimpleType parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrSimpleType(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<IrSimpleType> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int ANNOTATION_FIELD_NUMBER = 1;
  private java.util.List<IrConstructorCall> annotation_;
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public java.util.List<IrConstructorCall> getAnnotationList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public java.util.List<? extends IrConstructorCallOrBuilder>
      getAnnotationOrBuilderList() {
    return annotation_;
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public int getAnnotationCount() {
    return annotation_.size();
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public IrConstructorCall getAnnotation(int index) {
    return annotation_.get(index);
  }
  /**
   * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
   */
  public IrConstructorCallOrBuilder getAnnotationOrBuilder(
      int index) {
    return annotation_.get(index);
  }

  public static final int CLASSIFIER_FIELD_NUMBER = 2;
  private long classifier_;
  /**
   * <code>required int64 classifier = 2;</code>
   */
  public boolean hasClassifier() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int64 classifier = 2;</code>
   */
  public long getClassifier() {
    return classifier_;
  }

  public static final int NULLABILITY_FIELD_NUMBER = 3;
  private IrSimpleTypeNullability nullability_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
   */
  public boolean hasNullability() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
   */
  public IrSimpleTypeNullability getNullability() {
    return nullability_;
  }

  public static final int ARGUMENT_FIELD_NUMBER = 4;
  private java.util.List<Long> argument_;
  /**
   * <code>repeated int64 argument = 4 [packed = true];</code>
   *
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   */
  public java.util.List<Long>
      getArgumentList() {
    return argument_;
  }
  /**
   * <code>repeated int64 argument = 4 [packed = true];</code>
   *
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   */
  public int getArgumentCount() {
    return argument_.size();
  }
  /**
   * <code>repeated int64 argument = 4 [packed = true];</code>
   *
   * <pre>
   * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
   * </pre>
   */
  public long getArgument(int index) {
    return argument_.get(index);
  }
  private int argumentMemoizedSerializedSize = -1;

  public static final int ABBREVIATION_FIELD_NUMBER = 5;
  private IrTypeAbbreviation abbreviation_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  public boolean hasAbbreviation() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  public IrTypeAbbreviation getAbbreviation() {
    return abbreviation_;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
   */
  public IrTypeAbbreviationOrBuilder getAbbreviationOrBuilder() {
    return abbreviation_;
  }

  private void initFields() {
    annotation_ = java.util.Collections.emptyList();
    classifier_ = 0L;
    nullability_ = IrSimpleTypeNullability.NOT_SPECIFIED;
    argument_ = java.util.Collections.emptyList();
    abbreviation_ = IrTypeAbbreviation.getDefaultInstance();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasClassifier()) {
      memoizedIsInitialized = 0;
      return false;
    }
    for (int i = 0; i < getAnnotationCount(); i++) {
      if (!getAnnotation(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (hasAbbreviation()) {
      if (!getAbbreviation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < annotation_.size(); i++) {
      output.writeMessage(1, annotation_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(2, classifier_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(3, nullability_.getNumber());
    }
    if (getArgumentList().size() > 0) {
      output.writeRawVarint32(34);
      output.writeRawVarint32(argumentMemoizedSerializedSize);
    }
    for (int i = 0; i < argument_.size(); i++) {
      output.writeInt64NoTag(argument_.get(i));
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(5, abbreviation_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < annotation_.size(); i++) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(1, annotation_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(2, classifier_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeEnumSize(3, nullability_.getNumber());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < argument_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(argument_.get(i));
      }
      size += dataSize;
      if (!getArgumentList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      argumentMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(5, abbreviation_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static IrSimpleType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrSimpleType parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrSimpleType parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static IrSimpleType parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static IrSimpleType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrSimpleType parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static IrSimpleType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static IrSimpleType parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static IrSimpleType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static IrSimpleType parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(IrSimpleType prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType)
      IrSimpleTypeOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrSimpleType_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrSimpleType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              IrSimpleType.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getAnnotationFieldBuilder();
        getAbbreviationFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (annotationBuilder_ == null) {
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        annotationBuilder_.clear();
      }
      classifier_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      nullability_ = IrSimpleTypeNullability.NOT_SPECIFIED;
      bitField0_ = (bitField0_ & ~0x00000004);
      argument_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      if (abbreviationBuilder_ == null) {
        abbreviation_ = IrTypeAbbreviation.getDefaultInstance();
      } else {
        abbreviationBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrSimpleType_descriptor;
    }

    public IrSimpleType getDefaultInstanceForType() {
      return IrSimpleType.getDefaultInstance();
    }

    public IrSimpleType build() {
      IrSimpleType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public IrSimpleType buildPartial() {
      IrSimpleType result = new IrSimpleType(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (annotationBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.annotation_ = annotation_;
      } else {
        result.annotation_ = annotationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000001;
      }
      result.classifier_ = classifier_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000002;
      }
      result.nullability_ = nullability_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        argument_ = java.util.Collections.unmodifiableList(argument_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.argument_ = argument_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000004;
      }
      if (abbreviationBuilder_ == null) {
        result.abbreviation_ = abbreviation_;
      } else {
        result.abbreviation_ = abbreviationBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof IrSimpleType) {
        return mergeFrom((IrSimpleType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(IrSimpleType other) {
      if (other == IrSimpleType.getDefaultInstance()) return this;
      if (annotationBuilder_ == null) {
        if (!other.annotation_.isEmpty()) {
          if (annotation_.isEmpty()) {
            annotation_ = other.annotation_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAnnotationIsMutable();
            annotation_.addAll(other.annotation_);
          }
          onChanged();
        }
      } else {
        if (!other.annotation_.isEmpty()) {
          if (annotationBuilder_.isEmpty()) {
            annotationBuilder_.dispose();
            annotationBuilder_ = null;
            annotation_ = other.annotation_;
            bitField0_ = (bitField0_ & ~0x00000001);
            annotationBuilder_ = 
              org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getAnnotationFieldBuilder() : null;
          } else {
            annotationBuilder_.addAllMessages(other.annotation_);
          }
        }
      }
      if (other.hasClassifier()) {
        setClassifier(other.getClassifier());
      }
      if (other.hasNullability()) {
        setNullability(other.getNullability());
      }
      if (!other.argument_.isEmpty()) {
        if (argument_.isEmpty()) {
          argument_ = other.argument_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureArgumentIsMutable();
          argument_.addAll(other.argument_);
        }
        onChanged();
      }
      if (other.hasAbbreviation()) {
        mergeAbbreviation(other.getAbbreviation());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasClassifier()) {
        
        return false;
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          
          return false;
        }
      }
      if (hasAbbreviation()) {
        if (!getAbbreviation().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      IrSimpleType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (IrSimpleType) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<IrConstructorCall> annotation_ =
      java.util.Collections.emptyList();
    private void ensureAnnotationIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        annotation_ = new java.util.ArrayList<IrConstructorCall>(annotation_);
        bitField0_ |= 0x00000001;
       }
    }

    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder> annotationBuilder_;

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public java.util.List<IrConstructorCall> getAnnotationList() {
      if (annotationBuilder_ == null) {
        return java.util.Collections.unmodifiableList(annotation_);
      } else {
        return annotationBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public int getAnnotationCount() {
      if (annotationBuilder_ == null) {
        return annotation_.size();
      } else {
        return annotationBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCall getAnnotation(int index) {
      if (annotationBuilder_ == null) {
        return annotation_.get(index);
      } else {
        return annotationBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder setAnnotation(
        int index, IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.set(index, value);
        onChanged();
      } else {
        annotationBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder setAnnotation(
        int index, IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.set(index, builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(value);
        onChanged();
      } else {
        annotationBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        int index, IrConstructorCall value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(index, value);
        onChanged();
      } else {
        annotationBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.add(builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAnnotation(
        int index, IrConstructorCall.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.add(index, builderForValue.build());
        onChanged();
      } else {
        annotationBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder addAllAnnotation(
        Iterable<? extends IrConstructorCall> values) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, annotation_);
        onChanged();
      } else {
        annotationBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder clearAnnotation() {
      if (annotationBuilder_ == null) {
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        annotationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public Builder removeAnnotation(int index) {
      if (annotationBuilder_ == null) {
        ensureAnnotationIsMutable();
        annotation_.remove(index);
        onChanged();
      } else {
        annotationBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCall.Builder getAnnotationBuilder(
        int index) {
      return getAnnotationFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCallOrBuilder getAnnotationOrBuilder(
        int index) {
      if (annotationBuilder_ == null) {
        return annotation_.get(index);  } else {
        return annotationBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public java.util.List<? extends IrConstructorCallOrBuilder>
         getAnnotationOrBuilderList() {
      if (annotationBuilder_ != null) {
        return annotationBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(annotation_);
      }
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCall.Builder addAnnotationBuilder() {
      return getAnnotationFieldBuilder().addBuilder(
          IrConstructorCall.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCall.Builder addAnnotationBuilder(
        int index) {
      return getAnnotationFieldBuilder().addBuilder(
          index, IrConstructorCall.getDefaultInstance());
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public java.util.List<IrConstructorCall.Builder>
         getAnnotationBuilderList() {
      return getAnnotationFieldBuilder().getBuilderList();
    }
    private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
        IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder>
        getAnnotationFieldBuilder() {
      if (annotationBuilder_ == null) {
        annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            IrConstructorCall, IrConstructorCall.Builder, IrConstructorCallOrBuilder>(
                annotation_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        annotation_ = null;
      }
      return annotationBuilder_;
    }

    private long classifier_ ;
    /**
     * <code>required int64 classifier = 2;</code>
     */
    public boolean hasClassifier() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 classifier = 2;</code>
     */
    public long getClassifier() {
      return classifier_;
    }
    /**
     * <code>required int64 classifier = 2;</code>
     */
    public Builder setClassifier(long value) {
      bitField0_ |= 0x00000002;
      classifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int64 classifier = 2;</code>
     */
    public Builder clearClassifier() {
      bitField0_ = (bitField0_ & ~0x00000002);
      classifier_ = 0L;
      onChanged();
      return this;
    }

    private IrSimpleTypeNullability nullability_ = IrSimpleTypeNullability.NOT_SPECIFIED;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
     */
    public boolean hasNullability() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
     */
    public IrSimpleTypeNullability getNullability() {
      return nullability_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
     */
    public Builder setNullability(IrSimpleTypeNullability value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      nullability_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeNullability nullability = 3 [default = NOT_SPECIFIED];</code>
     */
    public Builder clearNullability() {
      bitField0_ = (bitField0_ & ~0x00000004);
      nullability_ = IrSimpleTypeNullability.NOT_SPECIFIED;
      onChanged();
      return this;
    }

    private java.util.List<Long> argument_ = java.util.Collections.emptyList();
    private void ensureArgumentIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        argument_ = new java.util.ArrayList<Long>(argument_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public java.util.List<Long>
        getArgumentList() {
      return java.util.Collections.unmodifiableList(argument_);
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public long getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public Builder setArgument(
        int index, long value) {
      ensureArgumentIsMutable();
      argument_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public Builder addArgument(long value) {
      ensureArgumentIsMutable();
      argument_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public Builder addAllArgument(
        Iterable<? extends Long> values) {
      ensureArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, argument_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 argument = 4 [packed = true];</code>
     *
     * <pre>
     * 0 - STAR, otherwise [63..2 - IrType index | 1..0 - Variance]
     * </pre>
     */
    public Builder clearArgument() {
      argument_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private IrTypeAbbreviation abbreviation_ = IrTypeAbbreviation.getDefaultInstance();
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrTypeAbbreviation, IrTypeAbbreviation.Builder, IrTypeAbbreviationOrBuilder> abbreviationBuilder_;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public boolean hasAbbreviation() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public IrTypeAbbreviation getAbbreviation() {
      if (abbreviationBuilder_ == null) {
        return abbreviation_;
      } else {
        return abbreviationBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder setAbbreviation(IrTypeAbbreviation value) {
      if (abbreviationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        abbreviation_ = value;
        onChanged();
      } else {
        abbreviationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder setAbbreviation(
        IrTypeAbbreviation.Builder builderForValue) {
      if (abbreviationBuilder_ == null) {
        abbreviation_ = builderForValue.build();
        onChanged();
      } else {
        abbreviationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder mergeAbbreviation(IrTypeAbbreviation value) {
      if (abbreviationBuilder_ == null) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            abbreviation_ != IrTypeAbbreviation.getDefaultInstance()) {
          abbreviation_ =
            IrTypeAbbreviation.newBuilder(abbreviation_).mergeFrom(value).buildPartial();
        } else {
          abbreviation_ = value;
        }
        onChanged();
      } else {
        abbreviationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public Builder clearAbbreviation() {
      if (abbreviationBuilder_ == null) {
        abbreviation_ = IrTypeAbbreviation.getDefaultInstance();
        onChanged();
      } else {
        abbreviationBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public IrTypeAbbreviation.Builder getAbbreviationBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getAbbreviationFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    public IrTypeAbbreviationOrBuilder getAbbreviationOrBuilder() {
      if (abbreviationBuilder_ != null) {
        return abbreviationBuilder_.getMessageOrBuilder();
      } else {
        return abbreviation_;
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeAbbreviation abbreviation = 5;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrTypeAbbreviation, IrTypeAbbreviation.Builder, IrTypeAbbreviationOrBuilder>
        getAbbreviationFieldBuilder() {
      if (abbreviationBuilder_ == null) {
        abbreviationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            IrTypeAbbreviation, IrTypeAbbreviation.Builder, IrTypeAbbreviationOrBuilder>(
                getAbbreviation(),
                getParentForChildren(),
                isClean());
        abbreviation_ = null;
      }
      return abbreviationBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType)
  }

  static {
    defaultInstance = new IrSimpleType(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType)
}
