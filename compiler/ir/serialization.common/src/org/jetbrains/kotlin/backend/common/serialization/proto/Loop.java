// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.debug.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.Loop}
 */
public final class Loop extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.Loop)
    LoopOrBuilder {
  // Use Loop.newBuilder() to construct.
  private Loop(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private Loop(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final Loop defaultInstance;
  public static Loop getDefaultInstance() {
    return defaultInstance;
  }

  public Loop getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
  @Override
  public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private Loop(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            loopId_ = input.readInt32();
            break;
          }
          case 18: {
            IrExpression.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = condition_.toBuilder();
            }
            condition_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(condition_);
              condition_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            label_ = input.readInt32();
            break;
          }
          case 34: {
            IrExpression.Builder subBuilder = null;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              subBuilder = body_.toBuilder();
            }
            body_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(body_);
              body_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000008;
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            originName_ = input.readInt32();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_Loop_descriptor;
  }

  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_Loop_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            Loop.class, Builder.class);
  }

  public static org.jetbrains.kotlin.protobuf.Parser<Loop> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<Loop>() {
    public Loop parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new Loop(input, extensionRegistry);
    }
  };

  @Override
  public org.jetbrains.kotlin.protobuf.Parser<Loop> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int LOOP_ID_FIELD_NUMBER = 1;
  private int loopId_;
  /**
   * <code>required int32 loop_id = 1;</code>
   */
  public boolean hasLoopId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int32 loop_id = 1;</code>
   */
  public int getLoopId() {
    return loopId_;
  }

  public static final int CONDITION_FIELD_NUMBER = 2;
  private IrExpression condition_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
   */
  public boolean hasCondition() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
   */
  public IrExpression getCondition() {
    return condition_;
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
   */
  public IrExpressionOrBuilder getConditionOrBuilder() {
    return condition_;
  }

  public static final int LABEL_FIELD_NUMBER = 3;
  private int label_;
  /**
   * <code>optional int32 label = 3;</code>
   */
  public boolean hasLabel() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional int32 label = 3;</code>
   */
  public int getLabel() {
    return label_;
  }

  public static final int BODY_FIELD_NUMBER = 4;
  private IrExpression body_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
   */
  public boolean hasBody() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
   */
  public IrExpression getBody() {
    return body_;
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
   */
  public IrExpressionOrBuilder getBodyOrBuilder() {
    return body_;
  }

  public static final int ORIGIN_NAME_FIELD_NUMBER = 5;
  private int originName_;
  /**
   * <code>optional int32 origin_name = 5;</code>
   */
  public boolean hasOriginName() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int32 origin_name = 5;</code>
   */
  public int getOriginName() {
    return originName_;
  }

  private void initFields() {
    loopId_ = 0;
    condition_ = IrExpression.getDefaultInstance();
    label_ = 0;
    body_ = IrExpression.getDefaultInstance();
    originName_ = 0;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasLoopId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasCondition()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getCondition().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasBody()) {
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, loopId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, condition_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, label_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, body_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, originName_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(1, loopId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(2, condition_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(3, label_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(4, body_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(5, originName_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @Override
  protected Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static Loop parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Loop parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Loop parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Loop parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Loop parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static Loop parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static Loop parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static Loop parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static Loop parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static Loop parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(Loop prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.Loop}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.Loop)
      LoopOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_Loop_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_Loop_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Loop.class, Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.Loop.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getConditionFieldBuilder();
        getBodyFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      loopId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (conditionBuilder_ == null) {
        condition_ = IrExpression.getDefaultInstance();
      } else {
        conditionBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      label_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      if (bodyBuilder_ == null) {
        body_ = IrExpression.getDefaultInstance();
      } else {
        bodyBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      originName_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_Loop_descriptor;
    }

    public Loop getDefaultInstanceForType() {
      return Loop.getDefaultInstance();
    }

    public Loop build() {
      Loop result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public Loop buildPartial() {
      Loop result = new Loop(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.loopId_ = loopId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      if (conditionBuilder_ == null) {
        result.condition_ = condition_;
      } else {
        result.condition_ = conditionBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.label_ = label_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      if (bodyBuilder_ == null) {
        result.body_ = body_;
      } else {
        result.body_ = bodyBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.originName_ = originName_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof Loop) {
        return mergeFrom((Loop)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Loop other) {
      if (other == Loop.getDefaultInstance()) return this;
      if (other.hasLoopId()) {
        setLoopId(other.getLoopId());
      }
      if (other.hasCondition()) {
        mergeCondition(other.getCondition());
      }
      if (other.hasLabel()) {
        setLabel(other.getLabel());
      }
      if (other.hasBody()) {
        mergeBody(other.getBody());
      }
      if (other.hasOriginName()) {
        setOriginName(other.getOriginName());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasLoopId()) {
        
        return false;
      }
      if (!hasCondition()) {
        
        return false;
      }
      if (!getCondition().isInitialized()) {
        
        return false;
      }
      if (hasBody()) {
        if (!getBody().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Loop parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (Loop) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int loopId_ ;
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public boolean hasLoopId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public int getLoopId() {
      return loopId_;
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public Builder setLoopId(int value) {
      bitField0_ |= 0x00000001;
      loopId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 loop_id = 1;</code>
     */
    public Builder clearLoopId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      loopId_ = 0;
      onChanged();
      return this;
    }

    private IrExpression condition_ = IrExpression.getDefaultInstance();
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder> conditionBuilder_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public IrExpression getCondition() {
      if (conditionBuilder_ == null) {
        return condition_;
      } else {
        return conditionBuilder_.getMessage();
      }
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public Builder setCondition(IrExpression value) {
      if (conditionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        condition_ = value;
        onChanged();
      } else {
        conditionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public Builder setCondition(
        IrExpression.Builder builderForValue) {
      if (conditionBuilder_ == null) {
        condition_ = builderForValue.build();
        onChanged();
      } else {
        conditionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public Builder mergeCondition(IrExpression value) {
      if (conditionBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            condition_ != IrExpression.getDefaultInstance()) {
          condition_ =
            IrExpression.newBuilder(condition_).mergeFrom(value).buildPartial();
        } else {
          condition_ = value;
        }
        onChanged();
      } else {
        conditionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public Builder clearCondition() {
      if (conditionBuilder_ == null) {
        condition_ = IrExpression.getDefaultInstance();
        onChanged();
      } else {
        conditionBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public IrExpression.Builder getConditionBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getConditionFieldBuilder().getBuilder();
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    public IrExpressionOrBuilder getConditionOrBuilder() {
      if (conditionBuilder_ != null) {
        return conditionBuilder_.getMessageOrBuilder();
      } else {
        return condition_;
      }
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression condition = 2;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder>
        getConditionFieldBuilder() {
      if (conditionBuilder_ == null) {
        conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            IrExpression, IrExpression.Builder, IrExpressionOrBuilder>(
                getCondition(),
                getParentForChildren(),
                isClean());
        condition_ = null;
      }
      return conditionBuilder_;
    }

    private int label_ ;
    /**
     * <code>optional int32 label = 3;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 label = 3;</code>
     */
    public int getLabel() {
      return label_;
    }
    /**
     * <code>optional int32 label = 3;</code>
     */
    public Builder setLabel(int value) {
      bitField0_ |= 0x00000004;
      label_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 label = 3;</code>
     */
    public Builder clearLabel() {
      bitField0_ = (bitField0_ & ~0x00000004);
      label_ = 0;
      onChanged();
      return this;
    }

    private IrExpression body_ = IrExpression.getDefaultInstance();
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder> bodyBuilder_;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public boolean hasBody() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public IrExpression getBody() {
      if (bodyBuilder_ == null) {
        return body_;
      } else {
        return bodyBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public Builder setBody(IrExpression value) {
      if (bodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        body_ = value;
        onChanged();
      } else {
        bodyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public Builder setBody(
        IrExpression.Builder builderForValue) {
      if (bodyBuilder_ == null) {
        body_ = builderForValue.build();
        onChanged();
      } else {
        bodyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public Builder mergeBody(IrExpression value) {
      if (bodyBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            body_ != IrExpression.getDefaultInstance()) {
          body_ =
            IrExpression.newBuilder(body_).mergeFrom(value).buildPartial();
        } else {
          body_ = value;
        }
        onChanged();
      } else {
        bodyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public Builder clearBody() {
      if (bodyBuilder_ == null) {
        body_ = IrExpression.getDefaultInstance();
        onChanged();
      } else {
        bodyBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public IrExpression.Builder getBodyBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getBodyFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    public IrExpressionOrBuilder getBodyOrBuilder() {
      if (bodyBuilder_ != null) {
        return bodyBuilder_.getMessageOrBuilder();
      } else {
        return body_;
      }
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression body = 4;</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        IrExpression, IrExpression.Builder, IrExpressionOrBuilder>
        getBodyFieldBuilder() {
      if (bodyBuilder_ == null) {
        bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            IrExpression, IrExpression.Builder, IrExpressionOrBuilder>(
                getBody(),
                getParentForChildren(),
                isClean());
        body_ = null;
      }
      return bodyBuilder_;
    }

    private int originName_ ;
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public boolean hasOriginName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public int getOriginName() {
      return originName_;
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public Builder setOriginName(int value) {
      bitField0_ |= 0x00000010;
      originName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 origin_name = 5;</code>
     */
    public Builder clearOriginName() {
      bitField0_ = (bitField0_ & ~0x00000010);
      originName_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.Loop)
  }

  static {
    defaultInstance = new Loop(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.Loop)
}
